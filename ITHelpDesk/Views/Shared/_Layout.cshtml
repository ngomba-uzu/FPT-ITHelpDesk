@using Microsoft.AspNetCore.Identity
@using ITHelpDesk.Models
@using ITHelpDesk.Data
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext _context


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ITHelpDesk</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    @RenderSection("Styles", required: false)
    <style>
        :root {
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
            --navbar-height: 60px;
            --primary-blue: #5C99C4;
            --text-color: #ffffff;
            --transition-speed: 0.3s;
        }

        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            background-color: #f8f9fa;
            overflow-x: hidden;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            height: 100vh;
            background-color: var(--primary-blue);
            color: white;
            position: fixed;
            transition: all var(--transition-speed) ease;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            left: 0;
            top: 0;
        }

            .sidebar.collapsed {
                width: var(--sidebar-collapsed-width);
            }

        .sidebar-header {
            height: var(--navbar-height);
            display: flex;
            align-items: center;
            padding: 0 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-menu {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px 0;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .sidebar-menu::-webkit-scrollbar {
                display: none;
            }

            .sidebar-menu ul {
                list-style: none;
                padding: 0;
                margin: 0;
            }

            .sidebar-menu li {
                position: relative;
            }

            .sidebar-menu a {
                display: flex;
                align-items: center;
                padding: 12px 15px;
                color: white;
                text-decoration: none;
                transition: all var(--transition-speed);
            }

                .sidebar-menu a:hover {
                    background-color: rgba(255, 255, 255, 0.2);
                }

            .sidebar-menu .menu-icon {
                font-size: 1.2rem;
                margin-right: 15px;
                min-width: 20px;
                text-align: center;
                transition: margin var(--transition-speed);
            }

            .sidebar-menu .menu-text {
                transition: all var(--transition-speed);
                white-space: nowrap;
            }

        .sidebar.collapsed .menu-text {
            opacity: 0;
            width: 0;
            height: 0;
            overflow: hidden;
            display: inline-block;
        }

        .sidebar.collapsed .menu-icon {
            margin-right: 0;
            margin-left: 5px;
        }

        .sidebar-menu .tooltip-text {
            position: absolute;
            left: 100%;
            top: 50%;
            transform: translateY(-50%);
            background-color: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 0.8rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: opacity var(--transition-speed);
            z-index: 1001;
            margin-left: 10px;
        }

        .sidebar.collapsed .menu-item:hover .tooltip-text {
            opacity: 1;
            visibility: visible;
        }

        /* Navbar Styles */
        .navbar {
            position: fixed;
            top: 0;
            left: var(--sidebar-width);
            right: 0;
            z-index: 1030;
            height: var(--navbar-height);
            padding-left: 70px; /* Adjusted for system name */
            transition: all var(--transition-speed);
            background-color: var(--primary-blue) !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .navbar.collapsed {
                left: var(--sidebar-collapsed-width);
                padding-left: 70px; /* Same padding when collapsed */
            }

        /* System Name Styles */
        .system-name {
            position: fixed;
            left: 50px; /* Positioned right of the menu icon */
            top: 15px;
            font-weight: bold;
            z-index: 1090;
            color: var(--text-color);
            white-space: nowrap;
        }

        /* Toggle Button Styles */
        .toggle-sidebar-btn {
            position: fixed;
            left: 15px;
            top: 12px;
            cursor: pointer;
            font-size: 1.25rem;
            z-index: 1100; /* Above system name */
            color: var(--text-color);
            background: none;
            border: none;
        }

        .nav-link,
        .toggle-sidebar-btn {
            color: var(--text-color) !important;
        }

        /* Notification Bell Styles */
        .navbar-nav-right {
            margin-left: auto;
            display: flex;
            align-items: center;
            position: relative;
        }

        .navbar .dropdown-toggle {
            display: flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            color: white !important;
        }

        .avatar-initials {
            font-weight: bold;
            font-size: 14px;
        }

        .notification-bell {
            color: white;
            font-size: 1.25rem;
            margin-left: 15px;
            display: flex;
            align-items: center;
        }

        .navbar-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 0.7rem;
            font-weight: bold;
            min-width: 18px;
            height: 18px;
            line-height: 18px;
            text-align: center;
            border-radius: 50%;
            background-color: #dc3545;
            color: white;
        }

        /* Dropdown menu styling */
        .dropdown-menu {
            border: none;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .dropdown-item {
            padding: 0.5rem 1.5rem;
        }

        .dropdown-divider {
            margin: 0.25rem 0;
        }

        .dropdown-menu-lg {
            width: 350px;
            max-height: 400px;
            overflow-y: auto;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 0;
            border: none;
        }

        .notification-item {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
            white-space: normal;
            transition: all 0.3s ease;
        }

            .notification-item.unread {
                background-color: #f8f9fa;
                font-weight: 500;
            }

            .notification-item:hover {
                background-color: #f1f1f1;
            }

        .notification-time {
            font-size: 0.8em;
            color: #6c757d;
            display: block;
            margin-top: 5px;
        }

        /* Main Content Styles */
        .main-content {
            margin-left: var(--sidebar-width);
            margin-top: var(--navbar-height);
            padding: 20px;
            flex-grow: 1;
            transition: all var(--transition-speed);
            min-height: calc(100vh - var(--navbar-height));
        }

        .sidebar.collapsed ~ .main-content {
            margin-left: var(--sidebar-collapsed-width);
        }

        /* Responsive Adjustments */
        @@media (max-width: 992px) {
            .sidebar

        {
            transform: translateX(-100%);
        }

        .sidebar.collapsed {
            transform: translateX(0);
            width: var(--sidebar-collapsed-width);
        }

        .navbar {
            left: 0;
            padding-left: 70px;
        }

        .main-content {
            margin-left: 0;
        }

        .sidebar.collapsed ~ .main-content {
            margin-left: var(--sidebar-collapsed-width);
        }

        }

        @@media (max-width: 768px) {
            .dropdown-menu-lg

        {
            width: 280px;
            right: 0;
            left: auto !important;
        }

        .system-name {
            display: none;
        }

        .navbar {
            padding-right: 15px;
            padding-left: 15px;
        }

        }

        @@media (max-width: 576px) {
            .navbar-badge

        {
            font-size: 0.6rem;
            min-width: 16px;
            height: 16px;
            line-height: 16px;
        }

        .dropdown-menu-lg {
            width: 100vw;
            position: fixed !important;
            top: var(--navbar-height) !important;
            left: 0 !important;
            right: 0 !important;
            transform: none !important;
        }

        .sidebar.collapsed {
            width: 0;
            overflow: hidden;
        }

            .sidebar.collapsed ~ .main-content {
                margin-left: 0;
            }

        }
    </style>
</head>
    <!-- Sidebar -->
<body>
    <!-- Sidebar with Proper Structure -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <!-- Empty header or add content if needed -->
        </div>
        <div class="sidebar-menu">
            <ul>
                <!-- Home Link (Now Visible) -->
                <li class="menu-item">
                    <a asp-area="" asp-controller="Home" asp-action="Index">
                        <i class="fas fa-home menu-icon"></i>
                        <span class="menu-text">Home</span>
                        <span class="tooltip-text">Home</span>
                    </a>
                </li>

                <!-- Create Ticket -->
                <li class="menu-item">
                    <a asp-area="" asp-controller="Tickets" asp-action="Index">
                        <i class="fas fa-ticket-alt menu-icon"></i>
                        <span class="menu-text">Create Ticket</span>
                        <span class="tooltip-text">Create Ticket</span>
                    </a>
                </li>

                @using Microsoft.AspNetCore.Identity
                @inject UserManager<IdentityUser> UserManager
                @inject SignInManager<IdentityUser> SignInManager

                @{
                    var user = await UserManager.GetUserAsync(User);
                    var roles = user != null ? await UserManager.GetRolesAsync(user) : new List<string>();
                }

                <!-- Manage System for Technical Support -->
                @if (roles.Contains("Technical Support"))
                {
                    <li class="menu-item">
                        <a href="#" class="dropdown-toggle" data-bs-toggle="collapse" data-bs-target="#manageSystemMenu">
                            <i class="fas fa-cog menu-icon"></i>
                            <span class="menu-text">Manage System</span>
                            <span class="tooltip-text">Manage System</span>
                        </a>
                        <ul class="collapse" id="manageSystemMenu">
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Ports" asp-action="Index">
                                    <i class="fas fa-network-wired menu-icon"></i>
                                    <span class="menu-text">Ports</span>
                                    <span class="tooltip-text">Ports</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Departments" asp-action="Index">
                                    <i class="fas fa-building menu-icon"></i>
                                    <span class="menu-text">Departments</span>
                                    <span class="tooltip-text">Departments</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Categories" asp-action="Index">
                                    <i class="fas fa-th-list menu-icon"></i>
                                    <span class="menu-text">Categories</span>
                                    <span class="tooltip-text">Categories</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Subcategories" asp-action="Index">
                                    <i class="fas fa-stream menu-icon"></i>
                                    <span class="menu-text">Subcategories</span>
                                    <span class="tooltip-text">Subcategories</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Technicians" asp-action="Index">
                                    <i class="fas fa-user-cog menu-icon"></i>
                                    <span class="menu-text">Technicians</span>
                                    <span class="tooltip-text">Technicians</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="TechnicianGroups" asp-action="Index">
                                    <i class="fas fa-users-cog menu-icon"></i>
                                    <span class="menu-text">TechnicianGroups</span>
                                    <span class="tooltip-text">TechnicianGroups</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="SeniorTechnicians" asp-action="Index">
                                    <i class="fas fa-user-tie menu-icon"></i>
                                    <span class="menu-text">SeniorTechnicians</span>
                                    <span class="tooltip-text">SeniorTechnicians</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Priorities" asp-action="Index">
                                    <i class="fas fa-exclamation-circle menu-icon"></i>
                                    <span class="menu-text">Priorities</span>
                                    <span class="tooltip-text">Priorities</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="Status" asp-action="Index">
                                    <i class="fas fa-tasks menu-icon"></i>
                                    <span class="menu-text">Status</span>
                                    <span class="tooltip-text">Status</span>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a asp-area="" asp-controller="TechnicianPorts" asp-action="Index">
                                    <i class="fas fa-network-wired menu-icon"></i>
                                    <span class="menu-text">TechnicianPorts</span>
                                    <span class="tooltip-text">TechnicianPorts</span>
                                </a>
                            </li>

                        </ul>
                    </li>
                }

                <!-- My Tickets for Technician -->
                @if (roles.Contains("Technician"))
                {
                    <li class="menu-item">
                        <a asp-controller="Technicians" asp-action="MyTickets">
                            <i class="fas fa-list menu-icon"></i>
                            <span class="menu-text">Manage Tickets</span>
                            <span class="tooltip-text">Manage Tickets</span>
                        </a>
                    </li>

                    <li class="menu-item">
                        <a asp-controller="Tickets" asp-action="PortTickets">
                            <i class="fas fa-network-wired menu-icon"></i> <!-- Choose any icon you like -->
                            <span class="menu-text">Port Tickets</span>
                            <span class="tooltip-text">View tickets by Port</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>


    <!-- Navbar -->
    <header>
        <button class="toggle-sidebar-btn" id="toggleSidebar">
            <i class="fas fa-bars"></i>
        </button>
        <div class="system-name">Service Desk</div>

        <nav class="navbar navbar-expand-sm navbar-toggleable-sm mb-3">
            <div class="container-fluid">
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav ms-auto">

                        @if (SignInManager.IsSignedIn(User))
                        {
                            
                            @if (roles.Contains("User") || roles.Contains("Technician"))
                            {
                                <li class="nav-item">
                                    @await Component.InvokeAsync("NotificationBell")
                                </li>
                            }
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    @{
                                        var applicationUser = await UserManager.GetUserAsync(User) as ApplicationUser;
                                        var fullName = $"{applicationUser?.FirstName} {applicationUser?.LastName}";
                                        var hasProfilePicture = applicationUser?.ProfilePicture != null;
                                    }

                                    @if (hasProfilePicture)
                                    {
                                        <img src="data:@applicationUser.ProfilePictureContentType;base64,@Convert.ToBase64String(applicationUser.ProfilePicture)"
                                             alt="Profile Picture"
                                             class="rounded-circle me-2"
                                             style="width: 32px; height: 32px; object-fit: cover;" />
                                    }
                                    else
                                    {
                                        <div class="avatar-initials rounded-circle me-2 d-flex align-items-center justify-content-center"
                                             style="width: 32px; height: 32px; background-color: #0d6efd; color: white;">
                                            @(!string.IsNullOrEmpty(fullName) ? fullName[0].ToString().ToUpper() : "U")
                                        </div>
                                    }
                                    <span class="d-none d-md-inline">@fullName</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                    <li><a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index">Profile</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                            <button type="submit" class="dropdown-item">Logout</button>
                                        </form>
                                    </li>
                                </ul>
                            </li>

                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-area="Identity" asp-page="/Account/Login">Login</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.getElementById('toggleSidebar');
            const navbar = document.querySelector('.navbar');

            // Toggle sidebar
            if (toggleBtn && sidebar && navbar) {
                toggleBtn.addEventListener('click', function () {
                    sidebar.classList.toggle('collapsed');
                    navbar.classList.toggle('collapsed');
                });
            }

            // Initialize Bootstrap tooltips
            $(function () {
                $('[data-bs-toggle="tooltip"]').tooltip();
            });

            // Handle dropdown menus in collapsed state
            const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
            dropdownToggles.forEach(toggle => {
                toggle.addEventListener('click', function (e) {
                    if (sidebar.classList.contains('collapsed')) {
                        e.preventDefault();
                        const target = this.getAttribute('data-bs-target');
                        if (target) {
                            $(target).collapse('toggle');
                        }
                    }
                });
            });

            // Notification system
            $(function() {
                // Debug flag
                const debugMode = true;
                let notificationUpdateInterval;

                // DOM elements
                const $notificationDropdown = $('#notificationDropdown');
                const $notificationList = $('#notificationList');
                const $notificationBadge = $notificationDropdown.find('.badge');

                // Initialize notification system
                initNotificationSystem();

                function initNotificationSystem() {
                    if (!$notificationDropdown.length) return;

                    // Event handlers
                    $notificationDropdown.on({
                        'show.bs.dropdown': handleDropdownShow,
                        'shown.bs.dropdown': handleDropdownShown,
                        'hide.bs.dropdown': clearNotificationInterval,
                        'hidden.bs.dropdown': clearNotificationInterval
                    });

                    // Initial load
                    updateNotificationCount();
                    startNotificationPolling();
                }

                function handleDropdownShow() {
                    logDebug('Dropdown opening - loading notifications');
                    loadNotifications();
                }

                function handleDropdownShown() {
                    logDebug('Dropdown fully shown - marking as read');
                    markNotificationsAsRead();
                }

                function clearNotificationInterval() {
                    if (notificationUpdateInterval) {
                        clearInterval(notificationUpdateInterval);
                        notificationUpdateInterval = null;
                    }
                }

                function startNotificationPolling() {
                    // Update every 30 seconds (30000ms)
                    notificationUpdateInterval = setInterval(updateNotificationCount, 30000);
                }

                function loadNotifications() {
                    showLoadingState();

                    $.ajax({
                        url: '/Notifications/GetNotifications',
                        type: 'GET',
                        dataType: 'json',
                        success: function(data, status, xhr) {
                            logDebug('Notifications loaded:', data);

                            if (!data || data.length === 0) {
                                showNoNotifications();
                                return;
                            }

                            renderNotifications(data);
                        },
                        error: function(xhr, status, error) {
                            logError('Failed to load notifications:', error);
                            showErrorState(xhr);
                        }
                    });
                }

                function showLoadingState() {
                    $notificationList.html(`
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            ${debugMode ? '<div class="small text-muted mt-2">Loading notifications...</div>' : ''}
                        </div>
                    `);
                }

                function showNoNotifications() {
                    $notificationList.html(`
                        <div class="text-center py-3">
                            No notifications found
                           
                        </div>
                    `);
                }

                function showErrorState(xhr) {
                    $notificationList.html(`
                        <div class="text-center py-3 text-danger">
                            Error loading notifications
                            ${debugMode ? `
                            <div class="small">
                                Status: ${xhr.status}<br>
                                Response: ${xhr.statusText}
                            </div>
                            ` : ''}
                        </div>
                    `);
                }
        function renderNotifications(notifications) {
            let html = '';
            notifications.forEach(notification => {
                try {
                    const timeAgo = notification.CreatedAt ?? notification.createdAt
                        ? moment(notification.CreatedAt ?? notification.createdAt).fromNow()
                        : 'just now';

                    const isUnread = notification.IsRead ?? notification.isRead;
                    const message = (notification.Message ?? notification.message ?? '').trim();
                    const unreadClass = isUnread ? '' : 'unread';

                    html += `
                        <div class="dropdown-item ${unreadClass}">
                                    <div class="d-flex justify-content-between align-items-center">
            <span class="notification-message me-3">${message || 'No message'}</span>
            <small class="text-muted">${timeAgo}</small>
        </div>

                        </div>
                        <div class="dropdown-divider"></div>
                    `;
                } catch (e) {
                    logError('Error rendering notification:', e, notification);
                }
            });

            $notificationList.html(html);
            setupNotificationClickHandlers();
        }



                function setupNotificationClickHandlers() {
                    $notificationList.find('.dropdown-item').on('click', function() {
                        const notificationId = $(this).data('notification-id');
                        logDebug('Notification clicked:', notificationId);
                        // Add any click handling logic here
                    });
                }

                function markNotificationsAsRead() {
                    $.post('/Notifications/MarkAsRead')
                        .done(function() {
                            logDebug('Notifications marked as read');
                            updateNotificationCount();
                            $notificationList.find('.unread').removeClass('unread');
                        })
                        .fail(function(xhr, status, error) {
                            logError('Failed to mark notifications as read:', error);
                        });
                }

                function updateNotificationCount() {
                    $.get('/Notifications/GetUnreadCount')
                        .done(function(count) {
                            logDebug('Unread count updated:', count);
                            updateBadge(count);
                        })
                        .fail(function(xhr, status, error) {
                            logError('Failed to update notification count:', error);
                        });
                }

                function updateBadge(count) {
                    if (count > 0) {
                        $notificationBadge.text(count).removeClass('d-none');
                    } else {
                        $notificationBadge.addClass('d-none');
                    }
                }

                function logDebug(...args) {
                    if (debugMode) {
                        console.log('[Notification Debug]', ...args);
                    }
                }

                function logError(...args) {
                    console.error('[Notification Error]', ...args);
                }
            });
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>